load_file("nrngui.hoc") 

create soma
access soma

gNaBar=0.12
gKBar=0.4
RM = 35000

//Soma dimensions
soma nseg = 1
soma diam = 20
soma L = 20
soma Ra = 123.0
soma Rm = RM


// Insert channels
soma insert na3
soma insert kdr
insert pas
g_pas = 1/RM
e_pas = -65.0
gbar_na3=gNaBar
gkdrbar_kdr=gKBar
ek_kdr = -90
ena_na3 = 55


v_init = -65
stamp = 0.1
Duration = 100

objectvar stim
soma stim = new IClamp(0.5)

stim.del = 100
stim.dur = Duration
stim.amp = stamp

tstop = 1000


// Panel buttons and procedures:

proc update_gNaBar() {
	gbar_na3=gNaBar
}

proc update_gKBar() {
	gkdrbar_kdr=gKBar
}


objref SpikeCounter, nil, spiketimes, fr, Istim
SpikeCounter = new NetCon(&soma.v(0.5), nil)
SpikeCounter.threshold = -15  //mV
spiketimes = new Vector()
fr = new Vector()
Istim = new Vector()

objref fi
fi = new File()
fi.wopen("FI2.dat")

// Define:
proc get_firingRate() {
    SpikeCounter.record(spiketimes)
    numspikes = spiketimes.size()
    FR = numspikes/stim.dur
    fi.aopen("FIclass1.dat")
    fi.printf("%f\n",FR)
    fr.append(FR)

}

currstep = 0.05 //nA

proc get_fiVsAmp() {
/// For getting FI curve vs Current amplitude:
    
    for (k = currstep; k<=1; k+=currstep) {

	finitialize(v_init)
	fcurrent()
	soma stim.amp = k
	fi.printf("%f\t", k)
	run()
        get_firingRate()
	i+=1
    }
}

get_fiVsAmp()

xpanel("Parameters")
xvalue("gNaBar","gNaBar",1,"update_gNaBar()",1,1)
xvalue("gKBar","gKBar",1,"update_gKBar()",1,1)
xpanel()

newPlotV()

fi.close()

nrncontrolmenu()
